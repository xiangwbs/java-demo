###优先级ERROR WARN INFO DEBUG###

 ###设置日志级别 ###
log4j.rootLogger = debug,stdout,info,error

###输出信息到控制台###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.ImmediateFlush = true
log4j.appender.stdout.Threshold = debug
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n

###输出DEBUG级别以上的日志###
##文件大小到达指定尺寸的时候产生一个新的文件(RollingFileAppender,MaxFileSize,MaxBackupIndex配套使用)
#log4j.appender.info = org.apache.log4j.RollingFileAppender
##文件最大容量
#log4j.appender.info.MaxFileSize=1MB
##滚动文件最大数
#log4j.appender.info.MaxBackupIndex=2
##每天产生一个日志文件
log4j.appender.info = org.apache.log4j.DailyRollingFileAppender
log4j.appender.info.File =${catalina.home}/logs/mylog/info.log
###日志增加时间后缀
log4j.appender.info.DatePattern=yyyy-MM-dd-HH-mm'.log'
###默认false，追加写入
log4j.appender.info.Append = true 
##日志消息的输出最低层次
log4j.appender.info.Threshold = debug
##默认true,所有消息立即输出。
log4j.appender.info.ImmediateFlush = true
##设置日志缓存，以及缓存大小16k
log4j.appender.info.BufferedIO=true
log4j.appender.info.BufferSize=16184
log4j.appender.info.layout = org.apache.log4j.PatternLayout
log4j.appender.info.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %-5p ]  %m%n

###输出ERROR级别以上的日志###
log4j.appender.error = org.apache.log4j.DailyRollingFileAppender
log4j.appender.error.File =${catalina.home}/logs/mylog/error.log
log4j.appender.error.DatePattern=yyyy-MM-dd-HH-mm'.log'
log4j.appender.error.Append = true 
log4j.appender.error.Threshold = error
log4j.appender.error.BufferedIO=true
log4j.appender.error.BufferSize=16184
log4j.appender.error.layout = org.apache.log4j.PatternLayout
log4j.appender.error.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %-5p ]  %m%n


# %m 输出代码中指定的信息，如log(message)中的message
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL  
# %r 输出自应用启动到输出该log信息耗费的毫秒数  
# %c 输出所属的类目，通常就是所在类的全名  
# %t 输出产生该日志事件的线程名  
# %f 输出日志信息所属的类的类名
# %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”  
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921  
# %l 输出日志事件的发生位置，包括类目名，方法名，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)

